(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>d});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,":root {\n  font-family: sans-serif;\n}\n\nhtml,\nbody {\n  height: 100%;\n  width: 100%;\n  margin: 0px;\n  padding: 0px;\n}\n\nbody {\n  display: flex;\n}\n.modal {\n  width: 100%;\n  height: 100%;\n  background-color: rgb(0, 0, 0, 0.3);\n  position: fixed;\n  top: 0px;\n  padding-top: 100px;\n  display: flex;\n  justify-content: center;\n}\n\n.modal-content {\n  background-color: white;\n  width: fit-content;\n  height: fit-content;\n  padding: 16px;\n  position: relative;\n}\n\n.sidebar {\n  padding: 24px;\n  height: 100%;\n  display: flex;\n  flex: 0 0 0;\n  flex-direction: column;\n  background-color: #334155;\n  color: #f1f5f9;\n  left: 0;\n  top: 0;\n  min-width: 250px;\n}\n\n.sidebar a {\n  font-size: 24px;\n}\n\n.sidebar a:hover {\n  text-decoration: underline;\n}\n\n.screen{\n  width: 100%;\n  height: 100%;\n  background-color: #e2e8f0;\n  color: #0f172a;\n}\n\n.todo-screen {\n  display: grid;\n  grid-template-rows: repeat(5, max-content) 1fr;\n  padding: 32px;\n}\n\n.todo-screen .todo-back {\n  place-self: center right;\n  height: 1.8rem;\n}\n\n.todo-screen .todo-prio {\n  text-align: right;\n}\n\n.todo-screen .todo-date {\n  text-align: right;\n}\n\n.todo-screen .todo-desc .label {\n  font-weight: bold;\n}\n\n.todo-screen .todo-desc .desc {\n  text-indent: 2em;\n}\n\na.todo-edit:hover{\n  text-decoration: underline;\n}\n\n.project {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.project-todos {\n  min-width: 200px;\n  width: 60%;\n  max-width: 500px;\n  flex: 0;\n  border-radius: 4px;\n  display: grid;\n  grid-template-rows: repeat(auto-fit, fit-content);\n  grid-auto-flow: row;\n  padding: 4px;\n  height: fit-content;\n}\n\n.todo-list {\n  padding: 4px;\n  gap: 8px;\n  width: 100%;\n  height: max-content;\n  background-color: #efefef;\n  display: grid;\n  grid-template-columns: max-content max-content 1fr max-content;\n  align-items: center;\n  justify-content: center;\n}\n\n.todo-list:not(.add-todo){\n  border-bottom: 2px solid #cbd5e1;\n  border-radius: 2px;\n}\n\n.todo-list .todo-title {\n  font-weight: bold;\n}\n\n.todo-list .todo-title.done {\n  text-decoration: line-through;\n  color: gray;\n}\n\n.todo-list .todo-title:not(.done):hover {\n  text-decoration: underline;\n}\n\n.todo-list.low {\n  background-color: #fef08a;\n}\n\n.todo-list.medium {\n  background-color: #facc15;\n}\n\n.todo-list.high {\n  background-color: #dc2626;\n  color: #fee2e2;\n}\n\n.todo-list .todo-date {\n  justify-self: right;\n  color: gray;\n}\n\n.todo-list .todo-date.done {\n  text-decoration: line-through;\n}\n\n.todo-list .todo-delete {\n  justify-self: right;\n  height: 1.4rem;\n}\n\n.todo-list .todo-delete:hover{\n  cursor: pointer;\n}\n\n.add-todo .add-todo-button {\n  font-weight: bold;\n}\n.add-todo:hover{\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.add-todo img{\n  height: 1.4rem;\n\n}\n\n.add-todo-form {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.input-container,\n.select-container {\n  display: flex;\n  justify-content: flex-start;\n  gap: 16px;\n}\n\n.input-container label,\n.select-container label {\n  font-weight: bold;\n}\n\n.input-container input {\n  flex: 1;\n}\n\n.text-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: left;\n}\n\n.text-container label {\n  font-weight: bold;\n}\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,uBAAuB;AACzB;;AAEA;;EAEE,YAAY;EACZ,WAAW;EACX,WAAW;EACX,YAAY;AACd;;AAEA;EACE,aAAa;AACf;AACA;EACE,WAAW;EACX,YAAY;EACZ,mCAAmC;EACnC,eAAe;EACf,QAAQ;EACR,kBAAkB;EAClB,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;EAClB,mBAAmB;EACnB,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,aAAa;EACb,WAAW;EACX,sBAAsB;EACtB,yBAAyB;EACzB,cAAc;EACd,OAAO;EACP,MAAM;EACN,gBAAgB;AAClB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,8CAA8C;EAC9C,aAAa;AACf;;AAEA;EACE,wBAAwB;EACxB,cAAc;AAChB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,UAAU;EACV,gBAAgB;EAChB,OAAO;EACP,kBAAkB;EAClB,aAAa;EACb,iDAAiD;EACjD,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,QAAQ;EACR,WAAW;EACX,mBAAmB;EACnB,yBAAyB;EACzB,aAAa;EACb,8DAA8D;EAC9D,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,gCAAgC;EAChC,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,6BAA6B;EAC7B,WAAW;AACb;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;AACA;EACE,0BAA0B;EAC1B,eAAe;AACjB;;AAEA;EACE,cAAc;;AAEhB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;AACV;;AAEA;;EAEE,aAAa;EACb,2BAA2B;EAC3B,SAAS;AACX;;AAEA;;EAEE,iBAAiB;AACnB;;AAEA;EACE,OAAO;AACT;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,qBAAqB;AACvB;;AAEA;EACE,iBAAiB;AACnB",sourcesContent:[":root {\n  font-family: sans-serif;\n}\n\nhtml,\nbody {\n  height: 100%;\n  width: 100%;\n  margin: 0px;\n  padding: 0px;\n}\n\nbody {\n  display: flex;\n}\n.modal {\n  width: 100%;\n  height: 100%;\n  background-color: rgb(0, 0, 0, 0.3);\n  position: fixed;\n  top: 0px;\n  padding-top: 100px;\n  display: flex;\n  justify-content: center;\n}\n\n.modal-content {\n  background-color: white;\n  width: fit-content;\n  height: fit-content;\n  padding: 16px;\n  position: relative;\n}\n\n.sidebar {\n  padding: 24px;\n  height: 100%;\n  display: flex;\n  flex: 0 0 0;\n  flex-direction: column;\n  background-color: #334155;\n  color: #f1f5f9;\n  left: 0;\n  top: 0;\n  min-width: 250px;\n}\n\n.sidebar a {\n  font-size: 24px;\n}\n\n.sidebar a:hover {\n  text-decoration: underline;\n}\n\n.screen{\n  width: 100%;\n  height: 100%;\n  background-color: #e2e8f0;\n  color: #0f172a;\n}\n\n.todo-screen {\n  display: grid;\n  grid-template-rows: repeat(5, max-content) 1fr;\n  padding: 32px;\n}\n\n.todo-screen .todo-back {\n  place-self: center right;\n  height: 1.8rem;\n}\n\n.todo-screen .todo-prio {\n  text-align: right;\n}\n\n.todo-screen .todo-date {\n  text-align: right;\n}\n\n.todo-screen .todo-desc .label {\n  font-weight: bold;\n}\n\n.todo-screen .todo-desc .desc {\n  text-indent: 2em;\n}\n\na.todo-edit:hover{\n  text-decoration: underline;\n}\n\n.project {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.project-todos {\n  min-width: 200px;\n  width: 60%;\n  max-width: 500px;\n  flex: 0;\n  border-radius: 4px;\n  display: grid;\n  grid-template-rows: repeat(auto-fit, fit-content);\n  grid-auto-flow: row;\n  padding: 4px;\n  height: fit-content;\n}\n\n.todo-list {\n  padding: 4px;\n  gap: 8px;\n  width: 100%;\n  height: max-content;\n  background-color: #efefef;\n  display: grid;\n  grid-template-columns: max-content max-content 1fr max-content;\n  align-items: center;\n  justify-content: center;\n}\n\n.todo-list:not(.add-todo){\n  border-bottom: 2px solid #cbd5e1;\n  border-radius: 2px;\n}\n\n.todo-list .todo-title {\n  font-weight: bold;\n}\n\n.todo-list .todo-title.done {\n  text-decoration: line-through;\n  color: gray;\n}\n\n.todo-list .todo-title:not(.done):hover {\n  text-decoration: underline;\n}\n\n.todo-list.low {\n  background-color: #fef08a;\n}\n\n.todo-list.medium {\n  background-color: #facc15;\n}\n\n.todo-list.high {\n  background-color: #dc2626;\n  color: #fee2e2;\n}\n\n.todo-list .todo-date {\n  justify-self: right;\n  color: gray;\n}\n\n.todo-list .todo-date.done {\n  text-decoration: line-through;\n}\n\n.todo-list .todo-delete {\n  justify-self: right;\n  height: 1.4rem;\n}\n\n.todo-list .todo-delete:hover{\n  cursor: pointer;\n}\n\n.add-todo .add-todo-button {\n  font-weight: bold;\n}\n.add-todo:hover{\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.add-todo img{\n  height: 1.4rem;\n\n}\n\n.add-todo-form {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.input-container,\n.select-container {\n  display: flex;\n  justify-content: flex-start;\n  gap: 16px;\n}\n\n.input-container label,\n.select-container label {\n  font-weight: bold;\n}\n\n.input-container input {\n  flex: 1;\n}\n\n.text-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: left;\n}\n\n.text-container label {\n  font-weight: bold;\n}\n\n"],sourceRoot:""}]);const d=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(i[c]=!0)}for(var u=0;u<t.length;u++){var s=[].concat(t[u]);r&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),e.push(s))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],d=0;d<t.length;d++){var c=t[d],u=r.base?c[0]+r.base:c[0],s=a[u]||0,l="".concat(u," ").concat(s);a[u]=s+1;var f=n(l),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)e[f].references++,e[f].updater(h);else{var A=o(h,r);r.byIndex=d,e.splice(d,0,{identifier:l,updater:A,references:1})}i.push(l)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var d=n(a[i]);e[d].references--}for(var c=r(t,o),u=0;u<a.length;u++){var s=n(a[u]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}a=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),o=n.n(r),a=n(569),i=n.n(a),d=n(565),c=n.n(d),u=n(216),s=n.n(u),l=n(589),f=n.n(l),h=n(426),A={};function m(t,e=null,n=null){const r=document.createElement(t);return e&&r.classList.add(e),n&&(r.textContent=n),r}function p(){const t=m("div","modal",void 0);t.addEventListener("click",(e=>{e.target==t&&t.remove()}));const e=m("div","modal-content",void 0);return t.appendChild(e),document.body.appendChild(t),e}function g(){document.querySelector(".modal").remove()}function v(t){const e=document.querySelector(".screen");e&&e.remove(),document.body.appendChild(t)}function b(t,e,n=""){const r=m("div","input-container",void 0),o=m("input","input",void 0);o.setAttribute("type",t),o.setAttribute("id",e);const a=m("label","label",n);return a.setAttribute("for",e),r.appendChild(a),r.appendChild(o),r}A.styleTagTransform=f(),A.setAttributes=c(),A.insert=i().bind(null,"head"),A.domAPI=o(),A.insertStyleElement=s(),e()(h.Z,A),h.Z&&h.Z.locals&&h.Z.locals,Math.pow(10,8);var w=36e5;function C(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function y(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var E={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},x=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,B=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,T=/^([+-])(\d{2})(?::?(\d{2}))?$/;function D(t){var e,n={},r=t.split(E.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?e=r[0]:(n.date=r[0],e=r[1],E.timeZoneDelimiter.test(n.date)&&(n.date=t.split(E.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var o=E.timezone.exec(e);o?(n.time=e.replace(o[1],""),n.timezone=o[1]):n.time=e}return n}function M(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=t.match(n);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:t.slice((r[1]||r[2]).length)}}function k(t,e){if(null===e)return new Date(NaN);var n=t.match(x);if(!n)return new Date(NaN);var r=!!n[4],o=S(n[1]),a=S(n[2])-1,i=S(n[3]),d=S(n[4]),c=S(n[5])-1;if(r)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,d,c)?function(t,e,n){var r=new Date(0);r.setUTCFullYear(t,0,4);var o=7*(e-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(e,d,c):new Date(NaN);var u=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(P[e]||(W(t)?29:28))}(e,a,i)&&function(t,e){return e>=1&&e<=(W(t)?366:365)}(e,o)?(u.setUTCFullYear(e,a,Math.max(o,i)),u):new Date(NaN)}function S(t){return t?parseInt(t):1}function j(t){var e=t.match(B);if(!e)return NaN;var n=N(e[1]),r=N(e[2]),o=N(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,r,o)?n*w+6e4*r+1e3*o:NaN}function N(t){return t&&parseFloat(t.replace(",","."))||0}function U(t){if("Z"===t)return 0;var e=t.match(T);if(!e)return 0;var n="+"===e[1]?-1:1,r=parseInt(e[2]),o=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,o)?n*(r*w+6e4*o):NaN}var P=[31,null,31,30,31,30,31,31,30,31,30,31];function W(t){return t%400==0||t%4==0&&t%100!=0}function Y(t){return C(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function O(t){C(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function L(t){if(C(1,arguments),!Y(t)&&"number"!=typeof t)return!1;var e=O(t);return!isNaN(Number(e))}var q={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function I(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}const z={date:I({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:I({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:I({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var F={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function H(t){return function(e,n){var r,o=n||{};if("formatting"===(o.context?String(o.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,i=o.width?String(o.width):a;r=t.formattingValues[i]||t.formattingValues[a]}else{var d=t.defaultWidth,c=o.width?String(o.width):t.defaultWidth;r=t.values[c]||t.values[d]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const R={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:H({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:H({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:H({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:H({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:H({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function _(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,d=a[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],u=Array.isArray(c)?X(c,(function(t){return t.test(d)})):Q(c,(function(t){return t.test(d)}));i=t.valueCallback?t.valueCallback(u):u,i=n.valueCallback?n.valueCallback(i):i;var s=e.slice(d.length);return{value:i,rest:s}}}function Q(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function X(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var Z,$={ordinalNumber:(Z={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(Z.matchPattern);if(!n)return null;var r=n[0],o=t.match(Z.parsePattern);if(!o)return null;var a=Z.valueCallback?Z.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=t.slice(r.length);return{value:a,rest:i}}),era:_({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:_({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:_({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:_({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:_({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const G={code:"en-US",formatDistance:function(t,e,n){var r,o=q[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:z,formatRelative:function(t,e,n,r){return F[t]},localize:R,match:$,options:{weekStartsOn:0,firstWeekContainsDate:1}};function J(t,e){C(2,arguments);var n=O(t).getTime(),r=y(e);return new Date(n+r)}function V(t,e){C(2,arguments);var n=y(e);return J(t,-n)}var K=864e5;function tt(t){C(1,arguments);var e=1,n=O(t),r=n.getUTCDay(),o=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function et(t){C(1,arguments);var e=O(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=tt(r),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=tt(a);return e.getTime()>=o.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function nt(t){C(1,arguments);var e=et(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=tt(n);return r}var rt=6048e5;function ot(t,e){C(1,arguments);var n=e||{},r=n.locale,o=r&&r.options&&r.options.weekStartsOn,a=null==o?0:y(o),i=null==n.weekStartsOn?a:y(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=O(t),c=d.getUTCDay(),u=(c<i?7:0)+c-i;return d.setUTCDate(d.getUTCDate()-u),d.setUTCHours(0,0,0,0),d}function at(t,e){C(1,arguments);var n=O(t),r=n.getUTCFullYear(),o=e||{},a=o.locale,i=a&&a.options&&a.options.firstWeekContainsDate,d=null==i?1:y(i),c=null==o.firstWeekContainsDate?d:y(o.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(r+1,0,c),u.setUTCHours(0,0,0,0);var s=ot(u,e),l=new Date(0);l.setUTCFullYear(r,0,c),l.setUTCHours(0,0,0,0);var f=ot(l,e);return n.getTime()>=s.getTime()?r+1:n.getTime()>=f.getTime()?r:r-1}function it(t,e){C(1,arguments);var n=e||{},r=n.locale,o=r&&r.options&&r.options.firstWeekContainsDate,a=null==o?1:y(o),i=null==n.firstWeekContainsDate?a:y(n.firstWeekContainsDate),d=at(t,e),c=new Date(0);c.setUTCFullYear(d,0,i),c.setUTCHours(0,0,0,0);var u=ot(c,e);return u}var dt=6048e5;function ct(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const ut=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return ct("yy"===e?r%100:r,e.length)},st=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):ct(n+1,2)},lt=function(t,e){return ct(t.getUTCDate(),e.length)},ft=function(t,e){return ct(t.getUTCHours()%12||12,e.length)},ht=function(t,e){return ct(t.getUTCHours(),e.length)},At=function(t,e){return ct(t.getUTCMinutes(),e.length)},mt=function(t,e){return ct(t.getUTCSeconds(),e.length)},pt=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return ct(Math.floor(r*Math.pow(10,n-3)),e.length)};var gt={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return ut(t,e)},Y:function(t,e,n,r){var o=at(t,r),a=o>0?o:1-o;return"YY"===e?ct(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):ct(a,e.length)},R:function(t,e){return ct(et(t),e.length)},u:function(t,e){return ct(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return ct(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return ct(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return st(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return ct(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var o=function(t,e){C(1,arguments);var n=O(t),r=ot(n,e).getTime()-it(n,e).getTime();return Math.round(r/dt)+1}(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):ct(o,e.length)},I:function(t,e,n){var r=function(t){C(1,arguments);var e=O(t),n=tt(e).getTime()-nt(e).getTime();return Math.round(n/rt)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):ct(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):lt(t,e)},D:function(t,e,n){var r=function(t){C(1,arguments);var e=O(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=n-r;return Math.floor(o/K)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):ct(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return ct(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return ct(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return ct(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,o=t.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,o=t.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return ft(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):ht(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):ct(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):ct(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):At(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):mt(t,e)},S:function(t,e){return pt(t,e)},X:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return bt(o);case"XXXX":case"XX":return wt(o);default:return wt(o,":")}},x:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return bt(o);case"xxxx":case"xx":return wt(o);default:return wt(o,":")}},O:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+vt(o,":");default:return"GMT"+wt(o,":")}},z:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+vt(o,":");default:return"GMT"+wt(o,":")}},t:function(t,e,n,r){var o=r._originalDate||t;return ct(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,r){return ct((r._originalDate||t).getTime(),e.length)}};function vt(t,e){var n=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=e||"";return n+String(o)+i+ct(a,2)}function bt(t,e){return t%60==0?(t>0?"-":"+")+ct(Math.abs(t)/60,2):wt(t,e)}function wt(t,e){var n=e||"",r=t>0?"-":"+",o=Math.abs(t);return r+ct(Math.floor(o/60),2)+n+ct(o%60,2)}const Ct=gt;function yt(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function Et(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}const xt={p:Et,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return yt(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",yt(o,e)).replace("{{time}}",Et(a,e))}};function Bt(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var Tt=["D","DD"],Dt=["YY","YYYY"];function Mt(t){return-1!==Tt.indexOf(t)}function kt(t){return-1!==Dt.indexOf(t)}function St(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var jt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Nt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ut=/^'([^]*?)'?$/,Pt=/''/g,Wt=/[a-zA-Z]/;function Yt(t,e,n){C(2,arguments);var r=String(e),o=n||{},a=o.locale||G,i=a.options&&a.options.firstWeekContainsDate,d=null==i?1:y(i),c=null==o.firstWeekContainsDate?d:y(o.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=a.options&&a.options.weekStartsOn,s=null==u?0:y(u),l=null==o.weekStartsOn?s:y(o.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!a.localize)throw new RangeError("locale must contain localize property");if(!a.formatLong)throw new RangeError("locale must contain formatLong property");var f=O(t);if(!L(f))throw new RangeError("Invalid time value");var h=Bt(f),A=V(f,h),m={firstWeekContainsDate:c,weekStartsOn:l,locale:a,_originalDate:f},p=r.match(Nt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,xt[e])(t,a.formatLong,m):t})).join("").match(jt).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return Ot(n);var i=Ct[r];if(i)return!o.useAdditionalWeekYearTokens&&kt(n)&&St(n,e,t),!o.useAdditionalDayOfYearTokens&&Mt(n)&&St(n,e,t),i(A,n,a.localize,m);if(r.match(Wt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return p}function Ot(t){return t.match(Ut)[1].replace(Pt,"'")}function Lt(t=null,e){const n=p(),r=m("form","add-todo-form",void 0),o=b("text","add-todo-title","Title:"),a=b("date","todo-due-date","Due Date:"),i=function(t,e=null,n=null,r="4",o="50"){const a=m("div","text-container",void 0),i=m("textarea","text-area",void 0);if(i.setAttribute("id",t),i.setAttribute("rows",r),i.setAttribute("cols",o),e&&i.setAttribute("name",e),n){const e=m("label","label",n);e.setAttribute("for",t),a.appendChild(e)}return a.appendChild(i),a}("todo-desc-input",void 0,"Description:",void 0,void 0),d=function(t,e,...n){const r=m("div","select-container",void 0),o=m("select",void 0,void 0);o.setAttribute("id",t);for(let[t,e]of n){const n=m("option",void 0,e);n.setAttribute("value",t),o.appendChild(n)}const a=m("label","label",e);return a.setAttribute("for",t),r.appendChild(a),r.appendChild(o),r}("todo-select-prio","Select Priority:",["none","None"],["low","Low"],["medium","Medium"],["high","High"]),c=m("button","submit-todo-form","Create");c.setAttribute("type","submit"),c.addEventListener("click",(t=>{if(r.checkValidity()){t.preventDefault();let n=document.getElementById("add-todo-title").value,r=document.getElementById("todo-desc-input").value,o=document.getElementById("todo-due-date").value,a=document.getElementById("todo-select-prio").value;""!=o&&o||(o=void 0),e.receive(Qt(n,r,o,a)),g()}})),r.appendChild(o),r.appendChild(a),r.appendChild(d),r.appendChild(i),r.appendChild(c),n.appendChild(r);const u=document.getElementById("add-todo-title");u.setAttribute("required","true"),t.title?u.value=t.title:u.value="";const s=document.getElementById("todo-due-date");t.date&&(s.value=Yt(t.date,"yyyy-MM-dd"));const l=document.getElementById("todo-desc-input");t.description&&(l.value=t.description);const f=document.getElementById("todo-select-prio");t.priority&&(f.value=t.priority)}let qt=!1;qt=!!function(t){var e;try{e=window.localStorage;var n="__storage_test__";return e.setItem(n,n),e.removeItem(n),!0}catch(t){return t instanceof DOMException&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}}();let It=[];function zt(){if(qt){let t="";for(let e in It)t=`${t}^${It[e]}`;localStorage.setItem("names",t)}}function Ft(t){qt&&(It.includes(t)||(It.push(t),zt()))}function Ht(t){if(qt){let e={...t};e.projectName=e.project.title,delete e.project,e.date=Yt(e.date,"yyyy-MM-dd"),localStorage.setItem(t.title,JSON.stringify(e)),Ft(`Todo: ${e.title}`)}}function Rt(t){if(qt){for(let e of t.todos)Ht(e);let e={...t};delete e.todos,localStorage.setItem(t.title,JSON.stringify(e)),Ft(`Project: ${t.title}`)}}const _t=n.p+"08233535a9321b39bf5f.svg";function Qt(t,e,n=new Date,r=null){function o(){Xt(a),Ht(a)}"string"==typeof n&&(n=function(t,e){C(1,arguments);var n=e||{},r=null==n.additionalDigits?2:y(n.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var o,a=D(t);if(a.date){var i=M(a.date,r);o=k(i.restDateString,i.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var d,c=o.getTime(),u=0;if(a.time&&(u=j(a.time),isNaN(u)))return new Date(NaN);if(!a.timezone){var s=new Date(c+u),l=new Date(0);return l.setFullYear(s.getUTCFullYear(),s.getUTCMonth(),s.getUTCDate()),l.setHours(s.getUTCHours(),s.getUTCMinutes(),s.getUTCSeconds(),s.getUTCMilliseconds()),l}return d=U(a.timezone),isNaN(d)?new Date(NaN):new Date(c+u+d)}(n)),r||(r="none");let a={project:null,done:!1,title:t,description:e,date:n,priority:r,update:o,receive:function(t){a.title=t.title,a.description=t.description,a.date=t.date,a.priority=t.priority,o()}};return a}function Xt(t){const e=document.querySelector(".screen");e&&e.remove();const n=m("div","todo-screen",void 0);n.classList.add("screen");const r=new Image;r.src=_t,r.classList.add("todo-back"),r.addEventListener("click",(()=>{null!=t.project&&v(Jt(t.project))}));const o=m("a","todo-edit","Edit");o.addEventListener("click",(()=>Lt(t,t)));const a=m("h1","todo-title",t.title),i=m("div","todo-date",`Due: ${Yt(t.date,"MM/dd/yyyy")}`),d=m("div","todo-prio",`Priority: ${t.priority}`);d.classList.add(t.priority);const c=m("div","todo-desc"),u=m("span","label","Description:"),s=m("p","desc",t.description);return n.appendChild(r),n.appendChild(o),n.appendChild(a),n.appendChild(d),n.append(i),n.append(c),c.appendChild(u),c.appendChild(s),document.body.appendChild(n),n}function Zt(t){const e=m("div","todo-list",void 0);e.classList.add(t.priority);const n=m("a","todo-title",t.title);n.addEventListener("click",(()=>{v(Xt(t))}));const r=m("span","todo-date",Yt(t.date,"MM/dd/yyyy")),o=m("input","todo_check",void 0);o.setAttribute("type","checkbox"),t.done&&(o.setAttribute("checked","true"),n.classList.add("done"),r.classList.add("done")),o.addEventListener("change",(()=>{t.done=!t.done,Ht(t),t.done?(n.classList.add("done"),r.classList.add("done")):(n.classList.remove("done"),r.classList.remove("done"))}));const a=new Image;return a.src=_t,a.classList.add("todo-delete"),a.addEventListener("click",(()=>{t.project&&t.project.remove_todo(t)})),e.appendChild(o),e.appendChild(n),e.appendChild(r),e.appendChild(a),e}const $t=n.p+"46ae0e09d1132337aa92.svg";function Gt(t,e=[]){function n(t){e.push(t),t.project=o,Ht(t),r()}function r(){Jt(o)}let o={title:t,todos:e,add_todo:n,remove_todo:function(t){!function(t){if(qt){localStorage.removeItem(t.title);for(let e in It)if(It[e].includes("Todo: ")&&It[e].slice(6)==t.title){It.splice(e,1),zt();break}}}(t);for(let n=0;n<e.length;n++)if(e[n]==t){e.splice(n,1),o.update(),Rt(o);break}},modify_todo:function(t,n){for(let r=0;r<e.length;r++)if(e[r]==t){e[r]=n,e[r].project=o;break}},update:r,receive:function(t){n(t)}};for(let t of e)t.project=o;return o}function Jt(t){const e=document.querySelector(".project");e&&e.remove();const n=m("div","project",void 0);n.classList.add("screen");const r=m("h1","project-title",t.title),o=m("div","project-todos",void 0);for(let e of t.todos){const t=Zt(e);o.appendChild(t)}const a=function(t){const e=m("div","add-todo",void 0);e.classList.add("todo-list");const n=new Image;n.src=$t,n.classList.add("add-todo-button"),e.addEventListener("click",(()=>{Lt(t,t)}));const r=m("span","add-button-desc","Add a Todo");return e.appendChild(n),e.appendChild(r),e}(t);return o.appendChild(a),n.appendChild(r),n.appendChild(o),document.body.appendChild(n),n}const Vt=function(){let t=[];const e=e=>{t.push(e),Rt(e),Kt()};return{projects:t,add_project:e,delete_project:e=>{for(let n=0;n<t.length;n++)if(t[n]==e){t.splice(n,1);break}},initialize:()=>{if(function(){!function(){if(qt){let t=localStorage.getItem("names");t&&(It=t.split("^").filter((t=>t.length>0)))}}();let t=function(){if(qt){let t=[];for(let e in It)if(It[e].includes("Project: ")){let n=It[e].slice(9),r=JSON.parse(localStorage.getItem(n));t.push(r)}return t}}(),e=function(){if(qt){let t=[];for(let e in It)if(It[e].includes("Todo: ")){let n=It[e].slice(6),r=JSON.parse(localStorage.getItem(n));t.push(r)}return t}}();for(let n of e){let e=n.projectName,r=Qt(n.title,n.description,n.date,n.priority);r.done=n.done;for(let o of t)o.title==e&&(n.project=o,o.todos?o.todos.push(r):o.todos=[r])}for(let e of t){let t=Gt(e.title,e.todos);Vt.add_project(t)}}(),0==t.length){const t=Gt("Inbox",[]);e(t)}Jt(t[0]),Kt()}}}();function Kt(){const t=document.querySelector(".sidebar");t&&t.remove();const e=m("div","sidebar",void 0),n=m("h1","sidebar-title","Projects:");e.appendChild(n),Vt.projects.forEach((t=>{const n=m("a","sidebar-link",t.title);n.addEventListener("click",(()=>v(Jt(t)))),e.append(n)}));const r=m("a","sidebar-create-project","Create a Project");return r.addEventListener("click",te),e.appendChild(r),document.body.insertBefore(e,document.body.firstChild),e}function te(){const t=p(),e=m("form","create-project-form",void 0),n=b("text","create-project-title","Project Title:"),r=m("button","submit-button","Submit");return r.addEventListener("click",(t=>{if(document.querySelector(".create-project-form").checkValidity()){t.preventDefault();const e=Gt(document.getElementById("create-project-title").value,[]);Vt.add_project(e),g()}})),e.appendChild(n),e.appendChild(r),t.appendChild(e),document.getElementById("create-project-title").setAttribute("required","true"),t}Vt.initialize()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,